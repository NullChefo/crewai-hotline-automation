name: Build and Deploy Python Application

on:
  push:
    branches:
      - main
      - master
      - dev
  pull_request:
    branches:
      - main
      - master
      - dev

# If you have envirement variables, you should add them here

jobs:


  deploy:
#    needs: build
    runs-on: ubuntu-latest
    steps:
      #      - name: Checkout code
      #        uses: actions/checkout@v4
      #
      #      - name: Install Railway
      #        run: npm i -g @railway/cli

      #      - name: Deploy to server
      #        run: |
      #          # Add your deployment steps here
      #          echo "Deploying to server"

      # - name: Redeploy
      #   run: railway redeploy -y --service ${{ secrets.RAILWAY_SERVICE_ID }}
      #   env:
      #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run Deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }}
          SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
        run: |
          curl -X POST https://backboard.railway.app/graphql/v2 \
          -H "Authorization: Bearer $RAILWAY_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
            "operationName": "ServiceInstanceRedeploy",
            "query": "mutation ServiceInstanceRedeploy($serviceId: String!, $environmentId: String!) { serviceInstanceRedeploy(serviceId: $serviceId, environmentId: $environmentId) }",
            "variables": {
              "environmentId": "'$ENVIRONMENT_ID'",
              "serviceId": "'$SERVICE_ID'"
            }
          }'
  
  

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        id: cache-docker-layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Ensure cache directory exists
        run: mkdir -p /tmp/.buildx-cache

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_PASSWORD }}


        # you can specify --platform linux/amd64,linux/arm64 for multiplatform build
      - name: Build and push Docker image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker buildx create --use
          docker buildx build --cache-to type=local,dest=/tmp/.buildx-cache-new --cache-from type=local,src=/tmp/.buildx-cache --platform linux/amd64 --push -t ghcr.io/${REPO_NAME}:latest .
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain

      - name: Update cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-new
          key: ${{ runner.os }}-buildx-${{ github.sha }}-new
          restore-keys: |
            ${{ runner.os }}-buildx-

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
##      - name: Checkout code
##        uses: actions/checkout@v4
##
##      - name: Install Railway
##        run: npm i -g @railway/cli
#
##      - name: Deploy to server
##        run: |
##          # Add your deployment steps here
##          echo "Deploying to server"
#
#      # - name: Redeploy
#      #   run: railway redeploy -y --service ${{ secrets.RAILWAY_SERVICE_ID }}
#      #   env:
#      #     RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
#
#      - name: Run Deployment
#        env:
#          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
#          SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
#          ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
#        run: |
#          curl -X POST https://backboard.railway.app/graphql/v2 \
#          -H "Authorization: Bearer $RAILWAY_TOKEN" \
#          -H "Content-Type: application/json" \
#          -d '{
#            "operationName": "ServiceInstanceRedeploy",
#            "query": "mutation ServiceInstanceRedeploy($serviceId: String!, $environmentId: String!) { serviceInstanceRedeploy(serviceId: $serviceId, environmentId: $environmentId) }",
#            "variables": {
#              "environmentId": "'$ENVIRONMENT_ID'",
#              "serviceId": "'$SERVICE_ID'"
#            }
#          }'